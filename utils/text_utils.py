#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Text utilities for the novel generator application.
These functions handle text processing, parsing, and formatting.
"""

import re
import random
import logging
from typing import Dict, List, Tuple, Optional, Any, Union

# ロギングの設定
logger = logging.getLogger('novel_generator')

def tags_string_to_list(tags_string: str) -> List[str]:
    """
    カンマ区切りのタグ文字列をリストに変換
    
    Args:
        tags_string: カンマ区切りのタグ文字列
        
    Returns:
        List[str]: タグのリスト
    """
    if not tags_string:
        return []
    
    # カンマとスペースで分割し、空文字を除去
    tags = [tag.strip() for tag in tags_string.split(',') if tag.strip()]
    return tags

def tags_list_to_string(tags_list: List[str]) -> str:
    """
    タグのリストをカンマ区切り文字列に変換
    
    Args:
        tags_list: タグのリスト
        
    Returns:
        str: カンマ区切りのタグ文字列
    """
    if not tags_list:
        return ""
    
    return ", ".join(tags_list)

def parse_synopsis(synopsis_text: str) -> Dict[str, str]:
    """
    AIが生成したあらすじテキストを解析して3つのエピソードに分ける関数
    
    Args:
        synopsis_text: 解析するあらすじのテキスト
        
    Returns:
        Dict[str, str]: 各エピソードのテキストを含む辞書
    """
    # まず、強力な正規表現パターンで分割を試みる
    episode_patterns = [
        # 第N話/N話目/第N章などの形式
        (r'(?:第\s*1\s*話|1\s*話目|第\s*一\s*話|第\s*1\s*章|1\s*部|パート\s*1|PART\s*1)[：:\s]*(.+?)(?=(?:第\s*2\s*話|2\s*話目|第\s*二\s*話|第\s*2\s*章|2\s*部|パート\s*2|PART\s*2)|$)', 'episode1'),
        (r'(?:第\s*2\s*話|2\s*話目|第\s*二\s*話|第\s*2\s*章|2\s*部|パート\s*2|PART\s*2)[：:\s]*(.+?)(?=(?:第\s*3\s*話|3\s*話目|第\s*三\s*話|第\s*3\s*章|3\s*部|パート\s*3|PART\s*3)|$)', 'episode2'),
        (r'(?:第\s*3\s*話|3\s*話目|第\s*三\s*話|第\s*3\s*章|3\s*部|パート\s*3|PART\s*3)[：:\s]*(.+?)(?=\Z)', 'episode3'),
        
        # 数字だけのヘッダー（1. 2. 3.などの形式）
        (r'1[\.、:：]\s*(.+?)(?=2[\.、:：]|$)', 'episode1'),
        (r'2[\.、:：]\s*(.+?)(?=3[\.、:：]|$)', 'episode2'),
        (r'3[\.、:：]\s*(.+?)(?=\Z)', 'episode3'),
        
        # 1話目: 導入 などの形式に対応
        (r'(?:1\s*話目\s*[:：]?\s*導入)[：:\s]*(.+?)(?=(?:2\s*話目\s*[:：]?\s*展開)|$)', 'episode1'),
        (r'(?:2\s*話目\s*[:：]?\s*展開)[：:\s]*(.+?)(?=(?:3\s*話目\s*[:：]?\s*クライマックス)|$)', 'episode2'),
        (r'(?:3\s*話目\s*[:：]?\s*クライマックス)[：:\s]*(.+?)(?=\Z)', 'episode3'),
        
        # 単なる「導入」「展開」「クライマックス」のセクション対応
        (r'(?:導入[:：]?|1話目[:：]?導入[:：]?)[：:\s]*(.+?)(?=(?:展開|2話目[:：]?展開)|$)', 'episode1'),
        (r'(?:展開[:：]?|2話目[:：]?展開[:：]?)[：:\s]*(.+?)(?=(?:クライマックス|3話目[:：]?クライマックス)|$)', 'episode2'),
        (r'(?:クライマックス[:：]?|3話目[:：]?クライマックス[:：]?)[：:\s]*(.+?)(?=\Z)', 'episode3'),
    ]
    
    parts = {}
    
    # 正規表現パターンで抽出を試みる
    for pattern, key in episode_patterns:
        matches = re.search(pattern, synopsis_text, re.DOTALL | re.MULTILINE)
        if matches:
            parts[key] = matches.group(1).strip()
    
    # 抽出できなかった場合のバックアッププラン
    # 1. 行ごとに解析
    if len(parts) < 3:
        lines = synopsis_text.split('\n')
        current_episode = None
        episode_text = ""
        
        for line in lines:
            line = line.strip()
            if not line:
                continue
                
            # エピソードのヘッダーらしき部分を検出
            if re.search(r'第\s*1\s*話|1\s*話目|第\s*一\s*話|1章|1\.|導入', line, re.IGNORECASE):
                current_episode = 'episode1'
                episode_text = ""
                continue
            elif re.search(r'第\s*2\s*話|2\s*話目|第\s*二\s*話|2章|2\.|展開', line, re.IGNORECASE):
                if current_episode and episode_text:
                    parts[current_episode] = episode_text.strip()
                current_episode = 'episode2'
                episode_text = ""
                continue
            elif re.search(r'第\s*3\s*話|3\s*話目|第\s*三\s*話|3章|3\.|クライマックス', line, re.IGNORECASE):
                if current_episode and episode_text:
                    parts[current_episode] = episode_text.strip()
                current_episode = 'episode3'
                episode_text = ""
                continue
                
            # 現在のエピソードにテキストを追加
            if current_episode:
                episode_text += line + "\n"
        
        # 最後のエピソードを追加
        if current_episode and episode_text:
            parts[current_episode] = episode_text.strip()
    
    # 2. それでも不完全な場合は単純に3分割
    if 'episode1' not in parts or 'episode2' not in parts or 'episode3' not in parts:
        logger.warning("あらすじを解析できませんでした。単純に3分割します。")
        
        # 段落で分割してみる
        paragraphs = re.split(r'\n\s*\n', synopsis_text)
        
        if len(paragraphs) >= 3:
            # 段落数が3以上ある場合は適当に分配
            first_third = len(paragraphs) // 3
            second_third = 2 * len(paragraphs) // 3
            
            parts['episode1'] = '\n\n'.join(paragraphs[:first_third]).strip()
            parts['episode2'] = '\n\n'.join(paragraphs[first_third:second_third]).strip()
            parts['episode3'] = '\n\n'.join(paragraphs[second_third:]).strip()
        else:
            # 段落数が不足している場合はテキスト全体を均等に3分割
            text_length = len(synopsis_text)
            parts['episode1'] = synopsis_text[:text_length//3].strip()
            parts['episode2'] = synopsis_text[text_length//3:2*text_length//3].strip()
            parts['episode3'] = synopsis_text[2*text_length//3:].strip()
    
    # 最終チェック: 各エピソードが存在し、中身があることを確認
    for key in ['episode1', 'episode2', 'episode3']:
        if key not in parts or not parts[key]:
            parts[key] = f"第{key[-1]}話のあらすじ（自動生成）"
    
    logger.info(f"あらすじ解析結果: エピソード1={len(parts['episode1'])}文字, エピソード2={len(parts['episode2'])}文字, エピソード3={len(parts['episode3'])}文字")
    
    return parts

# 男性キャラクターの性癖・特徴（50個）
MALE_KINKS_DICT = {
    "攻め": "パートナーをリードすることに満足感を覚える",
    "支配欲強い": "相手をコントロールすることに喜びを感じる",
    "胸フェチ": "胸元に視線が集中しがち",
    "言葉責め": "言葉によるコミュニケーションに強い反応を示す",
    "焦らし好き": "じっくりと相手を高めることに喜びを感じる",
    "優しい": "相手を大切に扱い、気持ちを尊重する",
    "拘束": "相手を拘束することに興奮を覚える",
    "耳元囁き": "耳元で囁くことで相手を惑わせるのが好き",
    "甘え下手": "感情表現が苦手だが、内に秘めた想いは強い",
    "背中フェチ": "女性の背中のラインに魅了される",
    "腰使い": "リズミカルな動きを得意とする",
    "首筋フェチ": "首元の香りや肌触りに惹かれる",
    "ギャップ萌え": "普段とのギャップに興奮を覚える",
    "愛撫重視": "じっくりと愛撫することを大切にする",
    "美脚フェチ": "美しい脚線に魅了される",
    "視線フェチ": "見つめ合うことで高揚感を得る",
    "服従願望": "時に強い相手に従うことで安らぎを感じる",
    "クンニ好き": "相手を舌で愉しませることに喜びを感じる",
    "触覚過敏": "肌の触れ合いに敏感に反応する",
    "唇フェチ": "唇の形や色、質感に惹かれる",
    "匂いフェチ": "自然な体の香りに強く反応する",
    "汗フェチ": "運動後の健康的な汗の香りに興奮する",
    "後ろから抱きしめ好き": "背後から抱きしめることで安心感を与えたい",
    "ボディタッチ多め": "会話中も自然と触れることが多い",
    "声フェチ": "魅力的な声に弱い",
    "頭を撫でたい": "頭を優しく撫でることで愛情を表現したい",
    "脇腹フェチ": "脇腹のくびれに魅力を感じる",
    "キスマーク付け好き": "所有欲の表現として痕を残したい",
    "手フェチ": "手の形や動きに美しさを感じる",
    "髪フェチ": "髪の毛の香りや触感に心惹かれる",
    "褒め上手": "適切な言葉で相手を褒めることが得意",
    "フェロモン出し": "自然と異性を引き寄せるオーラがある",
    "胸筋自慢": "鍛え上げた胸筋に自信がある",
    "腹筋自慢": "割れた腹筋を密かに誇りにしている",
    "ボディケア好き": "体を清潔に保つことにこだわりがある",
    "筋トレ好き": "定期的な筋トレで体を維持することを大切にする",
    "料理上手": "手料理で相手を喜ばせるのが好き",
    "猫舌": "熱いものが苦手で慎重に食べる様子が可愛い",
    "甘党": "甘いものに目がなく、意外な一面を持つ",
    "恥じらい": "恥ずかしがる様子が見られることがある",
    "指使い": "繊細な指の動きが特徴的",
    "ゾクゾク感覚": "背筋がゾクゾクする感覚を大切にする",
    "眼鏡フェチ": "眼鏡をかけた姿に魅力を感じる",
    "肩こり職人": "無意識に肩こりのマッサージが上手い",
    "朝に強い": "朝早くから活動的で元気がある",
    "夜に強い": "夜更かしが得意で夜に活力が出る",
    "体温高め": "体温が高く抱きしめると温かい",
    "アイコンタクト重視": "目を見て話すことを大切にする",
    "マメな連絡": "こまめに連絡を取ることを心がける",
    "プレゼント好き": "思いがけないプレゼントで驚かせるのが好き"
}

# 女性キャラクターの性癖・特徴（50個）
FEMALE_KINKS_DICT = {
    "受け身": "常に相手のリードに身を委ねることを好む",
    "責められ好き": "相手からの攻めに強い快感を覚える",
    "お尻フェチ": "相手の臀部に強い魅力を感じる",
    "羞恥心強い": "恥ずかしさの中に独特の高揚感を覚える",
    "露出": "見られることに背徳的な興奮を覚える",
    "焦らし": "じっくりと高められる快感に弱い",
    "声が出やすい": "感じると自然と声が漏れやすい",
    "甘え上手": "可愛らしく甘えることで相手の心を掴む",
    "敏感肌": "わずかな刺激にも敏感に反応する",
    "首筋弱い": "首筋に触れられると力が抜ける",
    "耳弱い": "耳を触られると震えてしまう",
    "いちゃいちゃ好き": "常に触れ合っていたいスキンシップ願望がある",
    "腰使い": "官能的な腰の動きが特徴的",
    "濡れやすい": "興奮すると自然と濡れやすい体質",
    "言葉責め弱い": "甘い言葉や卑猥な言葉に弱い",
    "胸元敏感": "胸に触れられると強く感じる",
    "キス好き": "長いキスを交わすことに幸福を感じる",
    "髪を触られるの好き": "髪を優しく触られることでリラックスする",
    "男性の腕に惹かれる": "筋肉質な腕に包まれたい願望がある",
    "視線に弱い": "じっと見つめられると照れてしまう",
    "香り好き": "男性の自然な体臭に惹かれる",
    "匂いフェチ": "香水や体の香りに敏感に反応する",
    "手を繋ぎたがり": "常に手を繋いでいたい願望がある",
    "後ろから抱きしめられ好き": "背後から抱きしめられると安心感を覚える",
    "ボディタッチ好き": "触れ合うことで親密さを感じたい",
    "声フェチ": "低く落ち着いた声に魅了される",
    "頭を撫でられ好き": "頭を優しく撫でられると嬉しくなる",
    "脇腹くすぐったい": "脇腹に触れられるとくすぐったがる",
    "キスマーク好き": "目立たない場所にキスマークを付けられるのが好き",
    "手フェチ": "大きな手に包まれる感覚が好き",
    "髪を撫でられ好き": "髪を優しく撫でられるとリラックスする",
    "褒められ好き": "素直に褒められると喜びを感じる",
    "仕草が色っぽい": "何気ない仕草に官能的な魅力がある",
    "色気が漂う": "自然と色気を感じさせるオーラがある",
    "唇が魅力的": "ふっくらとした唇が特徴的",
    "瞳が魅力的": "澄んだ瞳に吸い込まれそうな魅力がある",
    "肌が綺麗": "透明感のある美しい肌が特徴的",
    "美脚自慢": "長く引き締まった脚線が魅力的",
    "ウエスト細め": "くびれが強調された細いウエストが特徴",
    "バスト強調": "胸元の美しさに自信がある",
    "甘い物好き": "甘いものを食べる表情が可愛らしい",
    "恥じらい笑顔": "恥ずかしさから見せる笑顔が魅力的",
    "色気のある仕草": "無意識の仕草に色気がにじみ出る",
    "マッサージ上手": "指先の感覚が繊細で触れられると気持ちいい",
    "朝に弱い": "朝起きるのが苦手でぼんやりとした表情が愛らしい",
    "夜に活発": "夜になると活発になり別人のように魅力的",
    "体温低め": "体が冷えやすく抱きしめられることを好む",
    "潤んだ目": "感情が高ぶると目が潤んで魅力的",
    "胸鳴り": "ドキドキすると胸の高鳴りが止まらなくなる",
    "ささやき声": "耳元でささやく声が色っぽい"
}

def get_character_kinks_by_gender(gender: str) -> Dict[str, str]:
    """
    性別に応じた性癖辞書を返す
    
    Args:
        gender: 'male' または 'female'
        
    Returns:
        Dict[str, str]: 性癖とその説明の辞書
    """
    if gender.lower() == 'male':
        return MALE_KINKS_DICT
    else:  # female
        return FEMALE_KINKS_DICT

def generate_random_character_legacy(gender: str, kinks: Optional[str] = None) -> Tuple[str, str]:
    """
    性別とオプションの性癖に基づいてランダムなキャラクター設定を生成する
    
    Args:
        gender: キャラクターの性別 ('male' または 'female')
        kinks: オプションの性癖文字列（カンマ区切り）
        
    Returns:
        Tuple[str, str]: (キャラクター名, キャラクタープロフィール)
    """
    # 性別に基づく名前とベース設定
    if gender == "male":
        names = ["健太", "翔", "大輔", "剛", "悠真", "拓也", "直樹", "隆", "良介", "祐介", 
                "誠", "哲也", "一郎", "健", "修二", "徹", "竜也", "和彦", "浩二", "洋介",
                "涼太", "雄大", "純一", "貴志", "勇樹", "光一", "拓海", "崇", "航", "大樹"]
        age_range = (25, 45)
        occupations = ["会社員", "フリーランス", "写真家", "教師", "IT技術者", "医師", "建築家", 
                     "デザイナー", "飲食店オーナー", "作家", "営業マン", "プログラマー", "カメラマン", 
                     "弁護士", "パイロット", "大学講師", "フォトグラファー", "起業家", "料理人", "研究者",
                     "エンジニア", "スポーツトレーナー", "カフェオーナー", "バーテンダー", "俳優", "警察官",
                     "消防士", "音楽家", "芸術家", "投資家"]
        body_types = ["筋肉質", "細身だが鍛えている", "がっしりとした体格", "背が高く精悍", "整った体型", 
                     "少しぽっちゃりした体型", "筋肉隆々", "細マッチョ", "骨太", "肩幅広め", 
                     "スラっとした体型", "バランスのとれた体格", "長身", "アスリート体型", "骨格がしっかりした",
                     "均整の取れた筋肉質", "引き締まった", "太り気味だが力強い", "スポーティ", "小柄だが引き締まった"]
        personalities = ["冷静", "情熱的", "謎めいた", "優しい", "支配的", "自信に満ちた", "内向的だが芯が強い", 
                       "知的", "寡黙", "穏やか", "慎重", "大胆", "繊細", "温厚", "クール", "思慮深い",
                       "勇敢", "忍耐強い", "プライドが高い", "理性的", "直感的", "リーダー気質", "誠実",
                       "正義感が強い", "頼りがいがある", "職人気質", "完璧主義", "ロマンチスト", "挑戦的",
                       "理想主義者", "社交的", "細部にこだわる", "協調性がある", "几帳面"]
                        
        # 性癖辞書を使用
        kinks_dict = MALE_KINKS_DICT
               
    else:  # female
        names = ["美咲", "愛", "沙織", "加奈子", "恵", "美波", "由香", "麻衣", "瑞希", "彩",
                "優子", "瞳", "香織", "奈々", "裕子", "綾", "真理子", "菜々子", "由美", "美香",
                "莉子", "結衣", "明日香", "美月", "千尋", "真央", "陽子", "桃子", "咲良", "絵里"]
        age_range = (22, 38)
        occupations = ["OL", "モデル", "看護師", "デザイナー", "フリーランス", "教師", "カフェ店員", 
                     "フローリスト", "アーティスト", "編集者", "広告代理店勤務", "インテリアコーディネーター", 
                     "Web担当", "美容師", "ジュエリーデザイナー", "客室乗務員", "ホテルコンシェルジュ", "秘書",
                     "パティシエ", "イラストレーター", "ライター", "アパレル店員", "保育士", "ヨガインストラクター",
                     "栄養士", "旅行ガイド", "通訳", "カメラマン", "ダンサー", "声優"]
        body_types = ["細身", "スレンダー", "均整のとれた体", "豊満", "小柄だがくびれがある", "胸が大きく腰が細い",
                     "やわらかな曲線美", "すらっとした手足", "アスリート体型", "華奢", "グラマラス", 
                     "モデル体型", "ほっそりとした", "バランスのとれたボディライン", "しなやかな筋肉質",
                     "くびれが美しい", "長身", "童顔だが大人の体つき", "健康的な肉付き", "優美な佇まい"]
        personalities = ["控えめ", "好奇心旺盛", "情熱的", "神秘的", "知的", "感受性豊か", "内に秘めた欲望を持つ",
                       "芯の強い", "素直", "華やか", "積極的", "物静か", "クール", "天真爛漫", "しっかり者", "優雅",
                       "気さく", "繊細", "思いやりがある", "冷静沈着", "ユーモアのある", "几帳面", "社交的", 
                       "好奇心旺盛", "直感的", "理性的", "計画的", "臨機応変", "浪漫的", "芸術的感性豊か",
                       "細やかな気配り", "朗らか", "面倒見が良い", "自立心が強い"]
        
        # 性癖辞書を使用
        kinks_dict = FEMALE_KINKS_DICT
    
    # ランダムに要素を選択
    name = random.choice(names)
    age = random.randint(*age_range)
    occupation = random.choice(occupations)
    body_type = random.choice(body_types)
    personality = random.choice(personalities)
    
    # 基本プロフィール作成
    profile = f"{name}（{age}歳）は{occupation}。{body_type}で、性格は{personality}。"
    
    # 性癖に基づく追加プロフィール
    if kinks:
        kinks_list = [k.strip() for k in kinks.split('、')]
        kinks_descriptions = []
        
        for kink in kinks_list:
            if kink in kinks_dict:
                kinks_descriptions.append(kinks_dict[kink])
        
        if kinks_descriptions:
            profile += " " + "。".join(kinks_descriptions) + "。"
        
        profile = f"【性癖: {kinks}】\n" + profile
    
    return name, profile